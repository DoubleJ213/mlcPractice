package fxxk

import (
	"fmt"
	"testing"
)

/*
300. 最长递增子序列
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

示例 1：
输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
示例 2：
输入：nums = [0,1,0,3,2,3]
输出：4
示例 3：
输入：nums = [7,7,7,7,7,7,7]
输出：1

提示：
1 <= nums.length <= 2500
-104 <= nums[i] <= 104

进阶：
你能将算法的时间复杂度降低到 O(n log(n)) 吗?
*/

/*
首先画出递归树，想想怎么写暴力算法
比如nums为[0,3,1,6,2,2,7]
根为0 其子节点 0之后的所有数字  3的子节点 3之后的所有数字  1的子节点 1之后的所有数字
因为要严格递增，所以如果当前的数字小于等于前一个数字那就不需要这个子树继续遍历了
因为要记录最长的长度，不需要输出路径，那就整一个数，不断比较交换
两层循环，复杂度极高，估计提交不过，不写了。

继续用动态规划的思路思考
我们设计动态规划算法，不是需要一个 dp 数组吗？
我们可以假设 dp[0...i-1] 都已经被算出来了，然后问自己：怎么通过这些结果算出 dp[i]？
直接拿最长递增子序列这个问题举例你就明白了。
不过，首先要定义清楚 dp 数组的含义，即 dp[i] 的值到底代表着什么？
我们的定义是这样的：dp[i] 表示  以nums[i]这个数结尾的最长递增子序列的长度

*/

func lengthOfLIS(nums []int) int {
	dp300 := make([]int, len(nums))
	if nums == nil || len(nums) == 0 {
		return 0
	}
	dp300[0] = 1
	//我们的定义是这样的：dp[i] 表示  以nums[i]这个数结尾的最长递增子序列的长度

	//1,4,3,4,2,3
	//nums[5] = 3，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，
	//然后把 3 接到这些子序列末尾，就可以形成一个新的递增子序列，而且这个新的子序列长度加一。
	for i := 0; i < len(nums); i++ {
		for j := 0; j < i; j++ {
			//遍历数组index 为j 前面的数字，找到全部比当前数小的数
			if nums[j] < nums[i] {
				dp300[i] = getMax(dp300[i], dp300[j]+1)
			} else {
				if dp300[i] == 0 {
					dp300[i] = 1
				}
			}
		}
	}

	var res int
	for k := 0; k < len(dp300); k++ {
		res = getMax(res, dp300[k])
	}

	return res
}

func TestAl300(t *testing.T) {
	//fmt.Printf("3 --- %v", lengthOfLIS([]int{1, 2, 3}))
	fmt.Printf("4 --- %v", lengthOfLIS([]int{10, 9, 2, 5, 3, 7, 101, 18}))
}
