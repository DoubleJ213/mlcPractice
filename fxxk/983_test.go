package fxxk

import (
	"fmt"
	"testing"
)

/*
983. 最低票价
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。
在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。

火车票有 三种不同的销售方式 ：
一张 为期一天 的通行证售价为 costs[0] 美元；
一张 为期七天 的通行证售价为 costs[1] 美元；
一张 为期三十天 的通行证售价为 costs[2] 美元。
通行证允许数天无限制的旅行。
例如，如果我们在第 2 天获得一张 为期 7 天 的通行证，
那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
返回 你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费 。

示例 1：
输入：days = [1,4,6,7,8,20], costs = [2,7,15]
输出：11
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
你总共花了 $11，并完成了你计划的每一天旅行。

示例 2：
输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
输出：17
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。
你总共花了 $17，并完成了你计划的每一天旅行。

提示：
1 <= days.length <= 365
1 <= days[i] <= 365
days 按顺序严格递增
costs.length == 3
1 <= costs[i] <= 1000
*/

var res983 []int

/*
res983[i] 表示 第i天及以前 最少需要花多少钱

dp(i)表示i天及以前的最优解
dp(i) = dp(j-x)+第i天买了连续前x天的票
j 是 i 天出行前,最近的一次出行, j=days[bisect_right(days,i)-1]
j==-1 , 表示i 天出行前,没有要出行的了, 返回最优解 0
这个dp算是暴力解法

反过来dp[i]表示从i天启，完成之后的旅行所需要的最小费用
dp[i]=dp[i+1]
dp[i]=min(costs[0]+dp[i+1],costs[1]+dp[i+7])
dp[i]=min(dp[i],costs[2]+dp[i+30])
*/
func mincostTickets(days []int, costs []int) int {
	res983 = make([]int, 396, 396)
	lastIndex := len(days) - 1
	for i := 395; i >= 1 && lastIndex >= 0; i-- {
		if days[lastIndex] != i {
			//days[lastIndex]数组最后一个往前遍历
			//res983[i]表示从i天启，完成之后的旅行所需要的最小费用
			if i == 395 {
				//超过上限的最后一天，肯定是0
				res983[i] = 0
			} else {
				//数组中不存在这一天，这一天不需要旅行，等于后面一天的费用
				res983[i] = res983[i+1]
			}
			//当前数组处理完了，继续处理前一个index
			continue
		}
		// 三种情况取最小值
		res983[i] = getMin(costs[0]+res983[i+1], costs[1]+res983[i+7])
		res983[i] = getMin(res983[i], costs[2]+res983[i+30])
		//准备处理days中lastIndex 前一个
		lastIndex--
	}
	return res983[days[0]]
}

func TestAl983(t *testing.T) {
	fmt.Printf("11 --- %v\n", mincostTickets([]int{1, 4, 6, 7, 8, 20}, []int{2, 7, 15}))
	fmt.Printf("17 --- %v\n", mincostTickets([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, []int{2, 7, 15}))
}
