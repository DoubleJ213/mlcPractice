package fxxk

import (
	"fmt"
	"testing"
)

/*
198. 打家劫舍
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

提示：
1 <= nums.length <= 100
0 <= nums[i] <= 400
*/

var dp198 []int

// 相邻的不能偷，偷了就自动报警
// 定义dp198[i] 为偷第[i]户当前最多多少钱
// 要求最多偷了多少钱.肯定是越往后越偷越多。dp198[i] 和 dp198[i-2]有关系
// 最后 dp198[i] 和 dp198[i-1]比大小谁大return谁
func rob198(nums []int) int {
	n := len(nums)
	if n == 1 {
		return nums[0]
	}
	if n == 2 {
		if nums[0] > nums[1] {
			return nums[0]
		} else {
			return nums[1]
		}
	}
	if n == 3 {
		if nums[0]+nums[2] > nums[1] {
			return nums[0] + nums[2]
		} else {
			return nums[1]
		}
	}
	dp198 = make([]int, n)
	//比如 1, 2, 3, 2, 1  n=5
	dp198[0] = nums[0]
	dp198[1] = nums[1]
	dp198[2] = nums[0] + nums[2]
	//	写一半，想简单了。应该可以连续跳过好几个不偷，就偷几个多的
	//	10,1,1,10  这个最多偷20块钱可不是11块钱
	//  所以开始想的 dp198[i] 和 dp198[i-2]有关系其实不对，dp198[i] 和 i-2 之前所有的元素有关系
	//	但是不需要把前面的都遍历一遍。i-2 i-3 取最大值是不是就够了
	for i := 3; i < n; i++ {
		dp198[i] = getMax(dp198[i-2], dp198[i-3]) + nums[i]
	}
	if dp198[n-1] > dp198[n-2] {
		return dp198[n-1]
	} else {
		return dp198[n-2]
	}
}

func TestAl198(t *testing.T) {
	fmt.Println(rob198([]int{10, 1, 1, 2, 10}))
	fmt.Println(rob198([]int{10, 1, 1}))
	fmt.Println(rob198([]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}))
}
